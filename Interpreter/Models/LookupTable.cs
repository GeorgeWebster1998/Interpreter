using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;

namespace Interpreter.Models
{

	public class LookupTable
	{
		//These are the tokens that are used to classify each symbol
		[JsonConverter(typeof(StringEnumConverter))]
		public enum Tokens : int
		{
			EMPTY = -1,
			Plus = 0,
			Minus = 1,
			Multiply = 2,
			Divide = 3,
			Exponent = 4,
			Equal = 5,
			Left_Para = 7,
			Right_Para = 8,
			Integer = 9,
			Double = 10,
			Variable = 11

		}

		//This is the symbol table that is used
		public Symbol[] symbols;
		//This dictionary stores the name of the variable and either a double or int
		public Dictionary<String, object> variables;
		//This stores the parse trie generated by the parser
		public ParseTree pt;
		//Uses the MAX_TOKENS to decide how large the symbol table should be
		public int MAX_TOKENS;

		public LookupTable(int MAX_TOKENS)
		{
			this.MAX_TOKENS = MAX_TOKENS;
			InitSymbols(MAX_TOKENS);
			variables = new Dictionary<string, object>();
		}

		//Initialises the symbol table
		public void InitSymbols(int MAX_TOKENS)
		{
			symbols = new Symbol[MAX_TOKENS];
		}

		//Allows to add symbols by index
		public void AddSymbol(int index, Tokens type, Object value)
		{
			symbols[index] = new Symbol(type, value);
		}

		//Allows for getting a symbol by index
		public Symbol GetSymbol(int index)
		{
			return symbols[index];
		}

		//Overwrites the current variable 
		public void UpdateVariable(string key, double value)
		{
			variables[key] = value;
		}

		//Gets the variable thats stored in the dictionary using key
		public double GetVarValue(string key)
		{
			return Convert.ToDouble(variables[key]);
		}

		//Adds a variable to the dictionary
		public void AddToVariables(string key, object value)
		{
			variables.Add(key, value);
		}

		//Clears all variables
		public void ClearVariables()
		{
			variables.Clear();
		}

		//Checks if a variable exists in dictionary
		public bool VariableExist(string key)
		{
			return variables.ContainsKey(key);
		}

		//Sets the parsed trie 
		public void SetParsedTrie(ParseTree pt)
		{
			this.pt = pt;
		}

		//Struct that contains token and value
		public struct Symbol
		{
			public Symbol(Tokens type, object value)
			{
				this.Type = type;
				this.Value = value;
			}

			public Tokens Type { get; }
			public object Value { get; }

			public override string ToString()
			{
				return this.Type.ToString();
			}
		}
	}
}